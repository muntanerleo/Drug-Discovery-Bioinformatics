import streamlit as st
import pandas as pd
import subprocess
import base64
import pickle
import os 

# TODO: Molecular descriptor calculator function:
def desc_calc():
    # This bash command will be what i would be putting in the command line.
    # * It is important to run this because if I don't, then it would launch a GUI and I dont want that. 
    bashcommand = 'java -Xms1G -Xmx1G -Djava.awt.headless=true -jar ./PaDEL-Descriptor/PaDEL-Descriptor.jar -removesalt -standardizenitro -fingerprints -descriptortypes ./PaDEL-Descriptor/PubchemFingerprinter.xml -dir ./ -file descriptors_output.csv'
    
    # The bash command above will be serving as input in the code below
    process = subprocess.Popen(bashcommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate
    
    # After the descriptor has been calculated, I will remove the molecule.smi file.
    # The molecule.smi file will be generated by another function. 
    os.remove('molecule.smi')
    
# TODO: File download function:
# After making the predictions I will be encoding and decoding the results-
# and the output will be available as a file for downloading. 
def file_download(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv:base64,{b64}" download="prediction.csv">Download Predictions</a>'
    return href

# TODO: Model building function:
# This function will accept the input funtion and-
def build_model(input_data):
    # reads in the saved regression pkl model
    load_model = pickle.load(open('Thrombopoietin_receptor_model.pkl', 'rb'))
    
    # Apply the loaded model to make predictions on the input data
    prediction = load_model.predict(input_data)
    # Print out the header
    st.header('**Prediction Output**')
    
    # I will be creating a series that has one column named pEC50-
    # and the other molecule_name
    prediction_output = pd.Series(prediction, name='pEC50')
    molecule_name = pd.Series(load_data[1], name='molecule_name')
    
    # I will combine these two columns into a dataframe
    df = pd.concat([molecule_name,prediction_output], axis=1)
    
    # Finally I will write out the dataframe and allow it to generate the download link
    st.write(df)
    st.markdown(file_download(df), unsafe_allow_html=True)
    
# TODO: Page Title
st.markdown(""" 
# Medication Reccomender based on molecular bioactivity

This app allows you to predict the bioactivity towards inhibiting Thrombopoietin receptors. Thrombopoietin is a drug target for the disease Myeloproliferative leukemia. 

**Credits**            
- App built in `Python` + `Streamlit` by Leo Muntaner with the help of StackOverflow, YouTube, and Medium     
- Descriptor calculated using [PaDEL-Descriptor](http://www.yapcwsoft.com/dd/padeldescriptor/)
--     
""")

# TODO: Make the sidebar
with st.sidebar.header('1. Upload your CSV data'):
    uploaded_file = st.sidebar.file_uploader("Upload your input file", type=['txt'])

# TODO: This will be for the predict botton
if st.sidebar.button('Predict'):
    load_data = pd.read_table(uploaded_file, sep=' ', header=None)
    load_data.to_csv('molecule.smi', sep='\t', header=False, index=False)
    
    st.header('**Original Input Data**')
    st.write(load_data)
    
    with st.spinner("Calculating Descriptors..."):
        desc_calc()
    
    # TODO: Read in calculated descriptors and display the dataframe
    st.header('**Calculated Molecular Descriptors**')
    desc = pd.read_csv('descriptors_output.csv')
    st.write(desc)
    st.write(desc.shape)
    
    # TODO: Read descriptor list used in previously built model
    st.header('**Subset of descriptors from previously built models**')
    Xlist = list(pd.read_csv('descriptor_list.csv').columns)
    desc_subset = desc[Xlist]
    st.write(desc_subset)
    st.write(desc_subset.shape)
    
    # TODO: Apply trained model to make prediction on query compounds 
    # * This will be displayed in the browser if the user has not uplaoded any data.
    build_model(desc_subset)
else:
    st.info('Upload input data in the sidebar to start.')